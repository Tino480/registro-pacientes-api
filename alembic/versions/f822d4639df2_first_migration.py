"""first migration

Revision ID: f822d4639df2
Revises: 13299774b672
Create Date: 2024-07-18 01:57:30.464173

"""

import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "f822d4639df2"
down_revision = "13299774b672"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    sa.Enum(
        "agresividad",
        "alcoholismo",
        "alucinaciones",
        "ansiedad",
        "falta_de_concentracion",
        "auto_agresion",
        "bajo_autoestima",
        "bajo_redimiento_escolar",
        "cefaleas",
        "chupeteo_de_dedo",
        "convulciones",
        "desmayos",
        "enuresis",
        "encopresis",
        "farmaco_dependiente",
        "fobias",
        "hiperactividad",
        "intentos_de_suicidio",
        "ideas_de_muerte",
        "impulsividad",
        "insomio",
        "intolerante",
        "llano_execivo",
        "maltrato_fisico",
        "maltrato_sexual",
        "mareos",
        "obesidad",
        "obsesiones",
        "onicofagia",
        "pesadillas",
        "problemas_de_alimentacion",
        "problemas_visuales",
        "sonambulismo",
        "tartamudez",
        "tics",
        "timidez",
        "transtorno_de_aprendizaje",
        "transtorno_auditivo",
        "capacidad_de_insigth",
        name="symptom",
    ).create(op.get_bind())
    sa.Enum(
        "completa",
        "incompleta",
        "funcional",
        "nuclear",
        "extensa_funcional",
        "integrada",
        "desintegrada",
        "otro",
        name="typefamily",
    ).create(op.get_bind())
    sa.Enum("dad", "mom", "brother", "sister", name="kinship").create(op.get_bind())
    sa.Enum("DN", "ASP", "QTA", "TICS", name="universitydegree").create(op.get_bind())
    op.create_table(
        "consultations",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "update_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column("note_two", sa.String(), nullable=False),
        sa.Column("note_one", sa.String(), nullable=False),
        sa.Column(
            "type_family",
            postgresql.ENUM(
                "completa",
                "incompleta",
                "funcional",
                "nuclear",
                "extensa_funcional",
                "integrada",
                "desintegrada",
                "otro",
                name="typefamily",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column("children", sa.Boolean(), nullable=True),
        sa.Column("type_medic", sa.String(), nullable=False),
        sa.Column("accident", sa.String(), nullable=False),
        sa.Column(
            "symptom",
            postgresql.ENUM(
                "agresividad",
                "alcoholismo",
                "alucinaciones",
                "ansiedad",
                "falta_de_concentracion",
                "auto_agresion",
                "bajo_autoestima",
                "bajo_redimiento_escolar",
                "cefaleas",
                "chupeteo_de_dedo",
                "convulciones",
                "desmayos",
                "enuresis",
                "encopresis",
                "farmaco_dependiente",
                "fobias",
                "hiperactividad",
                "intentos_de_suicidio",
                "ideas_de_muerte",
                "impulsividad",
                "insomio",
                "intolerante",
                "llano_execivo",
                "maltrato_fisico",
                "maltrato_sexual",
                "mareos",
                "obesidad",
                "obsesiones",
                "onicofagia",
                "pesadillas",
                "problemas_de_alimentacion",
                "problemas_visuales",
                "sonambulismo",
                "tartamudez",
                "tics",
                "timidez",
                "transtorno_de_aprendizaje",
                "transtorno_auditivo",
                "capacidad_de_insigth",
                name="symptom",
                create_type=False,
            ),
            nullable=True,
        ),
        sa.Column("assitance_psychologist", sa.String(), nullable=True),
        sa.Column("type_psychologist", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("assitance_psychologist"),
        sa.UniqueConstraint("children"),
        sa.UniqueConstraint("type_psychologist"),
    )
    op.create_index(op.f("ix_consultations_id"), "consultations", ["id"], unique=False)
    op.drop_table("likes")
    op.drop_index("ix_posts_id", table_name="posts")
    op.drop_table("posts")
    op.drop_index("ix_roles_id", table_name="roles")
    op.drop_constraint("users_role_id_fkey", "users", type_="foreignkey")
    op.drop_column("users", "role_id")
    op.drop_table("roles")
    op.add_column("users", sa.Column("name", sa.String(), nullable=True))
    op.add_column("users", sa.Column("gender", sa.String(), nullable=False))
    op.add_column("users", sa.Column("age", sa.Integer(), nullable=True))
    op.add_column("users", sa.Column("date_of_birth", sa.String(), nullable=True))
    op.add_column("users", sa.Column("municipality", sa.String(), nullable=False))
    op.add_column("users", sa.Column("address", sa.String(), nullable=False))
    op.add_column("users", sa.Column("phone", sa.Integer(), nullable=True))
    op.add_column("users", sa.Column("religion", sa.String(), nullable=False))
    op.add_column("users", sa.Column("civil_status", sa.String(), nullable=True))
    op.add_column(
        "users",
        sa.Column(
            "university_degree",
            postgresql.ENUM(
                "DN", "ASP", "QTA", "TICS", name="universitydegree", create_type=False
            ),
            nullable=True,
        ),
    )
    op.add_column("users", sa.Column("registration", sa.String(), nullable=True))
    op.add_column("users", sa.Column("tutor", sa.String(), nullable=True))
    op.add_column("users", sa.Column("emergency_number", sa.Integer(), nullable=True))
    op.add_column(
        "users",
        sa.Column(
            "kinship",
            postgresql.ENUM(
                "dad", "mom", "brother", "sister", name="kinship", create_type=False
            ),
            nullable=True,
        ),
    )
    op.add_column("users", sa.Column("diagnostic_print", sa.String(), nullable=False))
    op.drop_constraint("users_email_key", "users", type_="unique")
    op.drop_constraint("users_username_key", "users", type_="unique")
    op.create_unique_constraint(None, "users", ["civil_status"])
    op.create_unique_constraint(None, "users", ["age"])
    op.create_unique_constraint(None, "users", ["registration"])
    op.create_unique_constraint(None, "users", ["emergency_number"])
    op.create_unique_constraint(None, "users", ["date_of_birth"])
    op.create_unique_constraint(None, "users", ["phone"])
    op.create_unique_constraint(None, "users", ["name"])
    op.create_unique_constraint(None, "users", ["municipality"])
    op.create_unique_constraint(None, "users", ["tutor"])
    op.create_unique_constraint(None, "users", ["address"])
    op.create_unique_constraint(None, "users", ["religion"])
    op.create_unique_constraint(None, "users", ["gender"])
    op.drop_column("users", "username")
    op.drop_column("users", "password")
    op.drop_column("users", "email")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column(
        "users", sa.Column("email", sa.VARCHAR(), autoincrement=False, nullable=False)
    )
    op.add_column(
        "users", sa.Column("role_id", sa.INTEGER(), autoincrement=False, nullable=False)
    )
    op.add_column(
        "users",
        sa.Column("password", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.add_column(
        "users",
        sa.Column("username", sa.VARCHAR(), autoincrement=False, nullable=False),
    )
    op.create_foreign_key(
        "users_role_id_fkey", "users", "roles", ["role_id"], ["id"], ondelete="CASCADE"
    )
    op.drop_constraint(None, "users", type_="unique")
    op.drop_constraint(None, "users", type_="unique")
    op.drop_constraint(None, "users", type_="unique")
    op.drop_constraint(None, "users", type_="unique")
    op.drop_constraint(None, "users", type_="unique")
    op.drop_constraint(None, "users", type_="unique")
    op.drop_constraint(None, "users", type_="unique")
    op.drop_constraint(None, "users", type_="unique")
    op.drop_constraint(None, "users", type_="unique")
    op.drop_constraint(None, "users", type_="unique")
    op.drop_constraint(None, "users", type_="unique")
    op.drop_constraint(None, "users", type_="unique")
    op.create_unique_constraint("users_username_key", "users", ["username"])
    op.create_unique_constraint("users_email_key", "users", ["email"])
    op.drop_column("users", "diagnostic_print")
    op.drop_column("users", "kinship")
    op.drop_column("users", "emergency_number")
    op.drop_column("users", "tutor")
    op.drop_column("users", "registration")
    op.drop_column("users", "university_degree")
    op.drop_column("users", "civil_status")
    op.drop_column("users", "religion")
    op.drop_column("users", "phone")
    op.drop_column("users", "address")
    op.drop_column("users", "municipality")
    op.drop_column("users", "date_of_birth")
    op.drop_column("users", "age")
    op.drop_column("users", "gender")
    op.drop_column("users", "name")
    op.create_table(
        "roles",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('roles_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("name", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.PrimaryKeyConstraint("id", name="roles_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_roles_id", "roles", ["id"], unique=False)
    op.create_table(
        "posts",
        sa.Column(
            "id",
            sa.INTEGER(),
            server_default=sa.text("nextval('posts_id_seq'::regclass)"),
            autoincrement=True,
            nullable=False,
        ),
        sa.Column("title", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column("content", sa.VARCHAR(), autoincrement=False, nullable=False),
        sa.Column(
            "published",
            sa.BOOLEAN(),
            server_default=sa.text("true"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "rating",
            sa.INTEGER(),
            server_default=sa.text("0"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "created_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            postgresql.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            autoincrement=False,
            nullable=False,
        ),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="posts_user_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", name="posts_pkey"),
        postgresql_ignore_search_path=False,
    )
    op.create_index("ix_posts_id", "posts", ["id"], unique=False)
    op.create_table(
        "likes",
        sa.Column("post_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.Column("user_id", sa.INTEGER(), autoincrement=False, nullable=False),
        sa.ForeignKeyConstraint(
            ["post_id"], ["posts.id"], name="likes_post_id_fkey", ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name="likes_user_id_fkey", ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("post_id", "user_id", name="likes_pkey"),
    )
    op.drop_index(op.f("ix_consultations_id"), table_name="consultations")
    op.drop_table("consultations")
    sa.Enum("DN", "ASP", "QTA", "TICS", name="universitydegree").drop(op.get_bind())
    sa.Enum("dad", "mom", "brother", "sister", name="kinship").drop(op.get_bind())
    sa.Enum(
        "completa",
        "incompleta",
        "funcional",
        "nuclear",
        "extensa_funcional",
        "integrada",
        "desintegrada",
        "otro",
        name="typefamily",
    ).drop(op.get_bind())
    sa.Enum(
        "agresividad",
        "alcoholismo",
        "alucinaciones",
        "ansiedad",
        "falta_de_concentracion",
        "auto_agresion",
        "bajo_autoestima",
        "bajo_redimiento_escolar",
        "cefaleas",
        "chupeteo_de_dedo",
        "convulciones",
        "desmayos",
        "enuresis",
        "encopresis",
        "farmaco_dependiente",
        "fobias",
        "hiperactividad",
        "intentos_de_suicidio",
        "ideas_de_muerte",
        "impulsividad",
        "insomio",
        "intolerante",
        "llano_execivo",
        "maltrato_fisico",
        "maltrato_sexual",
        "mareos",
        "obesidad",
        "obsesiones",
        "onicofagia",
        "pesadillas",
        "problemas_de_alimentacion",
        "problemas_visuales",
        "sonambulismo",
        "tartamudez",
        "tics",
        "timidez",
        "transtorno_de_aprendizaje",
        "transtorno_auditivo",
        "capacidad_de_insigth",
        name="symptom",
    ).drop(op.get_bind())
    # ### end Alembic commands ###
